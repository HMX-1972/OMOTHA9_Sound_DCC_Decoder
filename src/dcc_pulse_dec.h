//
// file:     dcc_pulse_dec.h
// author:   Desktop Station
// License:  Open source(Not specified)
//
// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------- //
// dcc_pulse_dec //
// ------------- //

#define dcc_pulse_dec_wrap_target 0
#define dcc_pulse_dec_wrap 6

static const uint16_t dcc_pulse_dec_program_instructions[] = {
            //     .wrap_target
    0xe02f, //  0: set    x, 15                      
    0x2020, //  1: wait   0 pin, 0                   
    0x00c6, //  2: jmp    pin, 6                     
    0x0042, //  3: jmp    x--, 2                     
    0x4024, //  4: in     x, 4                       
    0x0000, //  5: jmp    0                          
    0x4024, //  6: in     x, 4                       
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program dcc_pulse_dec_program = {
    .instructions = dcc_pulse_dec_program_instructions,
    .length = 7,
    .origin = -1,
};

static inline pio_sm_config dcc_pulse_dec_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + dcc_pulse_dec_wrap_target, offset + dcc_pulse_dec_wrap);
    return c;
}

static inline void dcc_pulse_dec_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = dcc_pulse_dec_program_get_default_config(offset);
    // PIOのピン設定。
    pio_gpio_init(pio, pin);
    // ピンの設定。inputにする。複数ピンを束ねて設定できるが1ピンのみにする。
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    // 受信FIFOを8段重ねる設定。これで、4x8x8=256文字のデータを一気に受信できるはず。
    sm_config_set_fifo_join (&c, PIO_FIFO_JOIN_RX);
    // ISR(インプットシフトレジスタ)の設定。autopushがミソ。
    sm_config_set_in_shift (&c,
                            true,       // shift right
                            true,       // enable autopush
                            32);        // autopush after 32 bits
    // Map the IN pin group to one pin, namely the `pin`
    // parameter to this function.
    //
    sm_config_set_in_pins (&c, pin);
    // Map the JMP pin to the `pin` parameter of this function.
    //
    sm_config_set_jmp_pin (&c, pin);
    // Set the clock divider to 1 tick per 7.25us(1cnt 14.5us) burst period
    //
    float div = clock_get_hz (clk_sys) / (1.0 / 7.25e-6);
    sm_config_set_clkdiv (&c, div);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

#endif
